#!/usr/bin/env node
// tslint:disable

const path = require("path");
const pkg = require("../package.json");
const fs = require("fs");
const optimistUsageLength = 98;
const yargs = require("yargs");
const version = pkg.version;
const { PeerServer } = require("../dist/src");
// const tools = require('../config/winston.mjs');

const winston = require("winston");
const winstonDaily = require("winston-daily-rotate-file");

const logDir = '/usr/local/bnids/logs';  // logs 디렉토리 하위에 로그 파일 저장
const { combine, timestamp, printf } = winston.format;

// Define log format
const logFormat = printf(info => {
  return `${info.timestamp} ${info.level}: ${info.message}`;
});


/*
 * Log Level
 * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6
 */
const logger = winston.createLogger({
  format: combine(
    timestamp({
      format: 'YYYY-MM-DD HH:mm:ss',
    }),
    logFormat,
  ),
  transports: [
    new winstonDaily({
      level: 'info',
      name: 'info',
      filename: `peerjs-server-%DATE%.log`,
      datePattern: 'YYYYMMDD',
      dirname: logDir,
      maxFiles: 30,  // 30일치 로그 파일 저장
      zippedArchive: true, 
    }),
  ],
});

// Production 환경이 아닌 경우(dev 등) 
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.combine(
      winston.format.colorize(),  // 색깔 넣어서 출력
      winston.format.simple(),  // `${info.level}: ${info.message} JSON.stringify({ ...rest })` 포맷으로 출력
    )
  }));
}

const opts = yargs
  .usage("Usage: $0")
  .wrap(Math.min(optimistUsageLength, yargs.terminalWidth()))
  .options({
    expire_timeout: {
      demandOption: false,
      alias: "t",
      describe: "timeout (milliseconds)",
      default: 5000
    },
    concurrent_limit: {
      demandOption: false,
      alias: "c",
      describe: "concurrent limit",
      default: 5000
    },
    alive_timeout: {
      demandOption: false,
      describe: "broken connection check timeout (milliseconds)",
      default: 60000
    },
    key: {
      demandOption: false,
      alias: "k",
      describe: "connection key",
      default: "peerjs"
    },
    sslkey: {
      demandOption: false,
      describe: "path to SSL key",    
      default: "/usr/local/bnids/cert/_wildcard_.hparking.co.kr_201911276PT6.key.pem"
    },
    sslcert: {
      demandOption: false,
      describe: "path to SSL certificate",
      default: "/usr/local/bnids/cert/_wildcard_.hparking.co.kr_201911276PT6.crt.pem",
    },
    host: {
      demandOption: false,
      alias: "H",
      describe: "host"
    },
    port: {
      demandOption: true,
      alias: "p",
      describe: "port"
    },
    path: {
      demandOption: false,
      describe: "custom path",
      default: "/"
    },
    allow_discovery: {
      demandOption: false,
      describe: "allow discovery of peers"
    },
    proxied: {
      demandOption: false,
      describe: "Set true if PeerServer stays behind a reverse proxy",
      default: false
    }
  })
  .boolean("allow_discovery")
  .argv;

process.on("uncaughtException", function (e) {
  logger.error("Error: " + e);
});

if (opts.sslkey || opts.sslcert) {
  if (opts.sslkey && opts.sslcert) {
    opts.ssl = {
      key: fs.readFileSync(path.resolve(opts.sslkey)),
      cert: fs.readFileSync(path.resolve(opts.sslcert))
    };

    logger.info("ssl 정보 불러오기 성공!!! ");
    logger.info(`---> opts.sslkey ${opts.sslkey}`);
    logger.info(`---> opts.sslcert ${opts.sslcert}`);

    delete opts.sslkey;
    delete opts.sslcert;
  } else {
    logger.error("Warning: PeerServer will not run because either " +
      "the key or the certificate has not been provided.");
    process.exit(1);
  }
}

const userPath = opts.path;
const server = PeerServer(opts, server => {
  const host = server.address().address;
  const port = server.address().port;

  logger.info(
    "Started PeerServer on %s, port: %s, path: %s (v. %s)",
    host, port, userPath || "/", version
  );

  const shutdownApp = () => {
    server.close(() => {
      logger.info('Http server closed.');

      process.exit(0);
    });
  };

  process.on('SIGINT', shutdownApp);
  process.on('SIGTERM', shutdownApp);
});

server.on("connection", client => {
  logger.info(`Client connected: ${client.getId()}`);
});

server.on("disconnect", client => {
  logger.info(`Client disconnected: ${client.getId()}`);
});
